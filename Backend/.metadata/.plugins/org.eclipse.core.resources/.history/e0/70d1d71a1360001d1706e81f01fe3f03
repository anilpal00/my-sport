package com.dailyinsuranceportal.services.impl;

import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.dailyinsuranceportal.dto.UserPolicyClaimDto;
import com.dailyinsuranceportal.entities.Policy;
import com.dailyinsuranceportal.entities.User;
import com.dailyinsuranceportal.entities.UserPolicyClaim;
import com.dailyinsuranceportal.entities.Wallet;
import com.dailyinsuranceportal.repository.PolicyRepository;
import com.dailyinsuranceportal.repository.UserPolicyClaimRepository;
import com.dailyinsuranceportal.repository.UserRepository;
import com.dailyinsuranceportal.repository.WalletRepository;
import com.dailyinsuranceportal.services.WalletService;

@Service
public class WalletServiceImpl implements WalletService {

	@Autowired
	private WalletRepository walletRepository;
	
	@Autowired
	private UserRepository userRepository;
	
	@Autowired
	private PolicyRepository policyRepository;
	
	@Autowired
	private UserPolicyClaimRepository userPolicyClaimRepository;
	
//	@Autowired
//	private Policy policy;
//	
//	@Autowired
//	private User user;
	
	@Override
	public Wallet addWalletBalance(Wallet walletBalance, User uid) {
		Optional<User> user1 = userRepository.findById(uid.getId());
		User user2 = user1.get();
		walletBalance.setMode(walletBalance.getMode());
		walletBalance.setAmount(walletBalance.getAmount());
		walletBalance.setUser_id(user2);
		Wallet wallet = this.walletRepository.save(walletBalance);
		return wallet;
	}

	@Override
	public List<Policy> getAllPolicy() {
		List<Policy> policy = this.policyRepository.findAll();
		return policy;
	}


	@Override
	public UserPolicyClaim purchaseInsurancePolicy(Policy purchasePolicyId, User uid) {
//		Policy policy = new Policy();
		UserPolicyClaim userPolicyClaim = new UserPolicyClaim();
		Optional<User> user1 = userRepository.findById(uid.getId());
		User user2 = user1.get();
//		policy.setId(purchasePolicyId.getId());
//		userPolicyClaim.setPolicy_id(policy);
		userPolicyClaim.setUser_id(user2);
		UserPolicyClaim userPolicyClaimSave = this.userPolicyClaimRepository.save(userPolicyClaim);
		return userPolicyClaimSave;

	}

	@Override
	public Policy getPolicyById(Long policyId) {
		Policy policy = this.policyRepository.findById(policyId).get();
		return policy;
	}

	@Override
	public UserPolicyClaimDto claimRequest(UserPolicyClaimDto requestClaim, User uid) {

		Long policyId =requestClaim.getPolicy().getId();
		Date purchase_dttm = requestClaim.getDateTimeOfPurchase();
		Long user_id = uid.getId();
		getClaimRequestdata(policyId, purchase_dttm, user_id);
//		Policy policyId = requestClaim.;
//		Date purchase_dttm = requestClaim.getDateTimeOfPurchase();
//		getClaimRequestdata(policyId, purchase_dttm, user_id);
//		Policy policy1 = this.userPolicyClaimRepository.findAllUserId(userId);		
//		requestClaim.getUser_id();
//		requestClaim.getDateTimeOfPurchase();	
//		UserPolicyClaim userPolicyClaim = this.userPolicyClaimRepository.save();
		return null;
	}

	@Override
	public List<UserPolicyClaim> getClaimRequestdata(Long policyId, Date purchase_dttm, Long uid) {
		List<UserPolicyClaim> claimRequestdata = this.userPolicyClaimRepository.getAllClaimData(policyId, purchase_dttm, uid);
		return claimRequestdata;
	}
	

}
